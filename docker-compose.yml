# Docker Compose for Fleet Management System
# Complete stack with Flask app, PostgreSQL, Redis, monitoring, and reverse proxy

version: '3.8'

services:
  # Flask Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-1.0.0}
    container_name: fleet-app
    restart: unless-stopped
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:HobokenHome3!@db.mjalobwwhnrgqqlnnbfa.supabase.co:5432/postgres}
      - REDIS_URL=${REDIS_URL:-redis://default:AXXXAAIjcDFlM2ZmOWZjNmM0MDk0MTY4OWMyNjhmNThlYjE4OGJmNnAxMA@keen-sponge-30167.upstash.io:6379}
      - PORT=5000
      - PROMETHEUS_METRICS_PORT=9090
    ports:
      - "5000:5000"
      - "9090:9090"
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    networks:
      - fleet-network
    depends_on:
      - redis-local
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Local Redis for development/testing (optional, use external Redis in production)
  redis-local:
    image: redis:7-alpine
    container_name: fleet-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fleet-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: fleet-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - fleet-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: fleet-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - fleet-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - app

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: fleet-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - fleet-network
    depends_on:
      - prometheus

  # Log aggregation with Fluentd (disabled for now)
  # fluentd:
  #   build: ./docker/fluentd
  #   container_name: fleet-fluentd
  #   restart: unless-stopped
  #   volumes:
  #     - app_logs:/fluentd/log/app:ro
  #     - nginx_logs:/fluentd/log/nginx:ro
  #     - ./docker/fluentd/conf:/fluentd/etc:ro
  #   networks:
  #     - fleet-network
  #   ports:
  #     - "24224:24224"
  #     - "24224:24224/udp"

  # Database backup service
  db-backup:
    image: postgres:15-alpine
    container_name: fleet-db-backup
    restart: "no"
    environment:
      - PGPASSWORD=${DB_PASSWORD:-HobokenHome3!}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - fleet-network
    command: /bin/sh /backup.sh
    profiles:
      - backup

  # Development/testing services
  mailhog:
    image: mailhog/mailhog:latest
    container_name: fleet-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - fleet-network
    profiles:
      - dev

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: fleet-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@fleet.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - fleet-network
    profiles:
      - dev

volumes:
  app_logs:
    driver: local
  app_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
  pgadmin_data:
    driver: local

networks:
  fleet-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16